{"pageContext":{"title":"001 - Macros for message descriptors","body":"<div class=\"section\" id=\"macros-for-message-descriptors\">\n<h1>001 - Macros for message descriptors<a class=\"headerlink\" href=\"#macros-for-message-descriptors\" title=\"Permalink to this headline\">¶</a></h1>\n<p>Proposal for a new <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;lingui/core</span></code> message macros using Babel macros.</p>\n<div class=\"section\" id=\"background\">\n<h2>Background<a class=\"headerlink\" href=\"#background\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Macros are used for generating messages in ICU MessageFormat syntax. The advantages over\nwriting format by hand are following:</p>\n<ul>\n<li><p class=\"first\">API of macros is much simpler than API of underlying I18n method:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">setupI18n</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/core`</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/macro`</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">i18n</span> <span class=\"o\">=</span> <span class=\"nx\">setupI18n</span><span class=\"p\">()</span>\n<span class=\"kr\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Joe&quot;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">date</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// With macro</span>\n<span class=\"nx\">i18n</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"sb\">`Hello </span><span class=\"si\">${</span><span class=\"nx\">name</span><span class=\"si\">}</span><span class=\"sb\">, today is </span><span class=\"si\">${</span><span class=\"nx\">date</span><span class=\"p\">(</span><span class=\"nx\">today</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// Without macro</span>\n<span class=\"nx\">i18n</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello {name}, today is {today, date}&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">date</span> <span class=\"p\">})</span>\n\n<span class=\"c1\">// For the sake of completeness, macro is transformed into this code:</span>\n<span class=\"c1\">// i18n({</span>\n<span class=\"c1\">//   id: &#39;Hello {name}, today is {today, date}&#39;,</span>\n<span class=\"c1\">//   values: { name, date }</span>\n<span class=\"c1\">//  })</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// i18n(id, values) is a shortcut for i18n({ id, values }):</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Messages are validated and type-checked. Generated message is always syntactically\nvalid. This is especially important for nested formatters:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">setupI18n</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/core`</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"nx\">plural</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/macro`</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">i18n</span> <span class=\"o\">=</span> <span class=\"nx\">setupI18n</span><span class=\"p\">()</span>\n<span class=\"kr\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Joe&quot;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n\n<span class=\"c1\">// With macro</span>\n<span class=\"nx\">i18n</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"sb\">`Hello </span><span class=\"si\">${</span><span class=\"nx\">name</span><span class=\"si\">}</span><span class=\"sb\">, you have </span><span class=\"si\">${</span><span class=\"nx\">plural</span><span class=\"p\">({</span>\n  <span class=\"nx\">value</span><span class=\"p\">,</span>\n  <span class=\"nx\">one</span><span class=\"o\">:</span> <span class=\"s1\">&#39;# unread message&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">other</span><span class=\"o\">:</span> <span class=\"s1\">&#39;# unread messages&#39;</span>\n<span class=\"si\">}</span><span class=\"sb\">)}`</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// Without macro</span>\n<span class=\"nx\">i18n</span><span class=\"p\">(</span>\n  <span class=\"s1\">&#39;Hello {name}, you have {value, plural, one {# unread message} other {# unread messages}}&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">date</span> <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Using abstraction over message syntax allow easy replacement of message syntax.\nFor example, without rewriting code it’s possible to switch from ICU MessageFormat\nto <a class=\"reference external\" href=\"https://projectfluent.org/\">Fluent</a>:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">setupI18n</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/core`</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/macro`</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">i18n</span> <span class=\"o\">=</span> <span class=\"nx\">setupI18n</span><span class=\"p\">()</span>\n<span class=\"kr\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Joe&quot;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">date</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">()</span>\n\n<span class=\"nx\">i18n</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"sb\">`Hello </span><span class=\"si\">${</span><span class=\"nx\">name</span><span class=\"si\">}</span><span class=\"sb\">, today is </span><span class=\"si\">${</span><span class=\"nx\">date</span><span class=\"p\">(</span><span class=\"nx\">today</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// Lingui configration { messageFormat: &#39;icu&#39; }</span>\n<span class=\"c1\">// ↓ ↓ ↓ ↓ ↓ ↓</span>\n<span class=\"c1\">// i18n({</span>\n<span class=\"c1\">//   id: &#39;Hello {name}, today is {today, date}&#39;,</span>\n<span class=\"c1\">//   values: { name, date }</span>\n<span class=\"c1\">//  })</span>\n\n<span class=\"c1\">// Lingui configration { messageFormat: &#39;fluent&#39; }</span>\n<span class=\"c1\">// ↓ ↓ ↓ ↓ ↓ ↓</span>\n<span class=\"c1\">// i18n({</span>\n<span class=\"c1\">//   id: &#39;Hello { $name }, today is { DATETIME($today) }&#39;,</span>\n<span class=\"c1\">//   values: { name, date }</span>\n<span class=\"c1\">//  })</span>\n</pre></div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\"><a class=\"reference external\" href=\"https://projectfluent.org/\">Fluent</a> format isn’t supported at the moment, nor the <code class=\"docutils literal notranslate\"><span class=\"pre\">messageFormat</span></code>\nconfiguration. It’s possible however, that this will be possible in the future.</p>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"proposal\">\n<h2>Proposal<a class=\"headerlink\" href=\"#proposal\" title=\"Permalink to this headline\">¶</a></h2>\n<p>All macros (<code class=\"docutils literal notranslate\"><span class=\"pre\">t</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">plural</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">selectOrdinal</span></code>) are transformed into\n<em>Message Descriptor</em> which is an object of following type:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">type</span> <span class=\"nx\">MessageDescriptor</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n   <span class=\"nx\">defaults</span><span class=\"o\">?:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n   <span class=\"nx\">values</span><span class=\"o\">?:</span> <span class=\"nb\">Object</span><span class=\"p\">,</span>\n   <span class=\"nx\">formats</span><span class=\"o\">?:</span> <span class=\"nb\">Object</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> is message ID and the only required parameter. <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code>\nare extracted to message catalog. Only <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">values</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">formats</span></code>\nare used at runtime, all other attributes are removed from production code\nfor size optimization.</p>\n<p>Generated <em>Message Descriptor</em> must be passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> object, which is callable,\nto perform the translation and formatting:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">setupI18n</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/core`</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/macro`</span>\n\n<span class=\"c1\">// Setup i18n and load messages</span>\n<span class=\"kr\">const</span> <span class=\"nx\">i18n</span> <span class=\"o\">=</span> <span class=\"nx\">setupI18n</span><span class=\"p\">()</span>\n<span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">load</span><span class=\"p\">({</span>\n  <span class=\"nx\">cs</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">messages</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">&#39;Hello {name}, today is {today, date}&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Zdravím {name}, dnes je {today, date}&#39;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Define message</span>\n<span class=\"kr\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Joe&quot;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">date</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">()</span>\n<span class=\"kr\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"nx\">t</span><span class=\"sb\">`Hello </span><span class=\"si\">${</span><span class=\"nx\">name</span><span class=\"si\">}</span><span class=\"sb\">, today is </span><span class=\"si\">${</span><span class=\"nx\">date</span><span class=\"p\">(</span><span class=\"nx\">today</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n\n<span class=\"c1\">// Translate and format message</span>\n<span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">activate</span><span class=\"p\">(</span><span class=\"s1\">&#39;cs&#39;</span><span class=\"p\">)</span>\n<span class=\"kr\">const</span> <span class=\"nx\">translation</span> <span class=\"o\">=</span> <span class=\"nx\">i18n</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"c1\">// === &#39;Zdravím Joe, dnes je 8. září 2018&#39;</span>\n</pre></div>\n</div>\n<p>Let’s take a look at specific use cases. There’re always two variants:</p>\n<ul class=\"simple\">\n<li>generated message is used as message ID</li>\n<li>custom ID is provided and generated message is used as a default one</li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">In following examples, <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> object is ommited to simplify code.</p>\n</div>\n<div class=\"section\" id=\"message-used-as-id\">\n<h3>Message used as ID<a class=\"headerlink\" href=\"#message-used-as-id\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Messages are generated using <code class=\"docutils literal notranslate\"><span class=\"pre\">t</span></code> macro used as a template tag:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"c1\">// Macro</span>\n<span class=\"nx\">t</span><span class=\"sb\">`Default message`</span>\n\n<span class=\"c1\">// ↓ ↓ ↓ ↓ ↓ ↓</span>\n<span class=\"cm\">/*i18n*/</span><span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Default message&#39;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>With variables:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"c1\">// Macro</span>\n<span class=\"nx\">t</span><span class=\"sb\">`Default message with </span><span class=\"si\">${</span><span class=\"nx\">param</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n\n<span class=\"c1\">// ↓ ↓ ↓ ↓ ↓ ↓</span>\n<span class=\"cm\">/*i18n*/</span><span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Default message with {param}&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">values</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">param</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"plurals-and-other-formatters\">\n<h4>plurals and other formatters<a class=\"headerlink\" href=\"#plurals-and-other-formatters\" title=\"Permalink to this headline\">¶</a></h4>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">plural</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">selectOrdinal</span></code> are very similar to each other. They\nare called with an object with all formatting parameters, like <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> and plural\nforms. Here’s the example of <code class=\"docutils literal notranslate\"><span class=\"pre\">plural</span></code>:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">plural</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"c1\">// Macro</span>\n<span class=\"nx\">plural</span><span class=\"p\">({</span> <span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">one</span><span class=\"o\">:</span> <span class=\"s2\">&quot;# book&quot;</span><span class=\"p\">,</span> <span class=\"nx\">other</span><span class=\"o\">:</span> <span class=\"s2\">&quot;# books&quot;</span> <span class=\"p\">})</span>\n\n<span class=\"c1\">// ↓ ↓ ↓ ↓ ↓ ↓</span>\n<span class=\"cm\">/*i18n*/</span><span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;{value, plural, one {# book} other {# books }}&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">values</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">param</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"messages-with-custom-ids\">\n<h3>Messages with custom IDs<a class=\"headerlink\" href=\"#messages-with-custom-ids\" title=\"Permalink to this headline\">¶</a></h3>\n<p>It’s possible to use a custom message ID and generated messages as a default one.\nIn this case, <code class=\"docutils literal notranslate\"><span class=\"pre\">t</span></code> macro is called with a message ID and then used as a template tag:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"c1\">// Macro</span>\n<span class=\"nx\">t</span><span class=\"p\">(</span><span class=\"s2\">&quot;msg.id&quot;</span><span class=\"p\">)</span><span class=\"sb\">`Default message`</span>\n\n<span class=\"c1\">// ↓ ↓ ↓ ↓ ↓ ↓</span>\n<span class=\"cm\">/*i18n*/</span><span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;msg.id&quot;</span><span class=\"p\">,</span>\n  <span class=\"nx\">defaults</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Default message&quot;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">plural</span></code> and other formatters are called with a custom ID as a first argument, while\nsecond argument is formatter parameters - value and message variants:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">plural</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"c1\">// Macro</span>\n<span class=\"nx\">plural</span><span class=\"p\">(</span><span class=\"s2\">&quot;msg.plural&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">value</span><span class=\"p\">,</span>\n  <span class=\"nx\">one</span><span class=\"o\">:</span> <span class=\"s2\">&quot;# book&quot;</span><span class=\"p\">,</span>\n  <span class=\"nx\">other</span><span class=\"o\">:</span> <span class=\"s2\">&quot;# books&quot;</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// ↓ ↓ ↓ ↓ ↓ ↓</span>\n<span class=\"cm\">/*i18n*/</span><span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;msg.plural&quot;</span><span class=\"p\">,</span>\n  <span class=\"nx\">defaults</span><span class=\"o\">:</span> <span class=\"s1\">&#39;{value, plural, one {# book} other {# books }}&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">values</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">param</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"description\">\n<h3>Description<a class=\"headerlink\" href=\"#description\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Another addition to API is message description, which is passed to translators and it\ncontains additional hints about the message. To add a message description, simply\nprepend the message with a comment starting with <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n:</span></code>. Everything after is\nconsidered as description.</p>\n<p>The comment can be either a line comment:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"c1\">// i18n: Greetings at homepage</span>\n<span class=\"nx\">t</span><span class=\"sb\">`Greetings at homepage`</span>\n\n<span class=\"c1\">// ↓ ↓ ↓ ↓ ↓ ↓</span>\n<span class=\"cm\">/*i18n: Greetings at homepage*/</span><span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Hello {name}&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">values</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">name</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>Or a block comment:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"cm\">/*i18n: Greetings at homepage */</span><span class=\"nx\">t</span><span class=\"p\">(</span><span class=\"s1\">&#39;message.hello&#39;</span><span class=\"p\">)</span><span class=\"sb\">`Hello </span><span class=\"si\">${</span><span class=\"nx\">name</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n\n<span class=\"c1\">// ↓ ↓ ↓ ↓ ↓ ↓</span>\n<span class=\"cm\">/*i18n: Greetings at homepage*/</span><span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;message.hello&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">defaults</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Hello {name}&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">values</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">name</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>Description for plurals and other formatters is the same:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">plurals</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"c1\">// i18n: Number of books</span>\n<span class=\"nx\">plural</span><span class=\"p\">({</span>\n  <span class=\"nx\">value</span><span class=\"p\">,</span>\n  <span class=\"nx\">one</span><span class=\"o\">:</span> <span class=\"s2\">&quot;# book&quot;</span><span class=\"p\">,</span>\n  <span class=\"nx\">other</span><span class=\"o\">:</span> <span class=\"s2\">&quot;# books&quot;</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// ↓ ↓ ↓ ↓ ↓ ↓</span>\n<span class=\"cm\">/*i18n: Number of books*/</span><span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;{value, plural, one {# book} other {# books }}&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">values</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">param</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"lazy-translations\">\n<h3>Lazy translations<a class=\"headerlink\" href=\"#lazy-translations\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Lazy translations are useful when we need to define a message, but translate it later.\nThis was previously achieved using <code class=\"docutils literal notranslate\"><span class=\"pre\">i18Mark</span></code>. Now we can use the same macros,\nbut instead of passing message descriptor to <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> object, we pass it to <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n.lazy</span></code>\nmethod:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">setupI18n</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/core`</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/macro`</span>\n\n<span class=\"c1\">// Setup i18n and load messages</span>\n<span class=\"kr\">const</span> <span class=\"nx\">i18n</span> <span class=\"o\">=</span> <span class=\"nx\">setupI18n</span><span class=\"p\">()</span>\n<span class=\"kr\">const</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">lazy</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"sb\">`Default message`</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// The translation is returned by simply calling the message:</span>\n<span class=\"kr\">const</span> <span class=\"nx\">translation</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// id attribute of translation function contains the reference to message ID</span>\n<span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">===</span> <span class=\"s2\">&quot;Default message&quot;</span> <span class=\"c1\">// message ID</span>\n</pre></div>\n</div>\n<p>Multiple lazy translations can be defined using <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n.defineMessages</span></code>:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">setupI18n</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/core`</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/macro`</span>\n\n<span class=\"c1\">// Setup i18n and load messages</span>\n<span class=\"kr\">const</span> <span class=\"nx\">i18n</span> <span class=\"o\">=</span> <span class=\"nx\">setupI18n</span><span class=\"p\">()</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">languages</span> <span class=\"o\">=</span> <span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">defineMessages</span><span class=\"p\">({</span>\n   <span class=\"nx\">en</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`English`</span><span class=\"p\">,</span>\n   <span class=\"nx\">cs</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`Czech`</span><span class=\"p\">,</span>\n   <span class=\"nx\">fr</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`French`</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">i18n.defineMessages</span></code> is just a shortcut for:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">const</span> <span class=\"nx\">languages</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"nx\">en</span><span class=\"o\">:</span> <span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">lazy</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"sb\">`English`</span><span class=\"p\">),</span>\n   <span class=\"nx\">cs</span><span class=\"o\">:</span> <span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">lazy</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"sb\">`Czech`</span><span class=\"p\">),</span>\n   <span class=\"nx\">fr</span><span class=\"o\">:</span> <span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">lazy</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"sb\">`French`</span><span class=\"p\">),</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">i18n.defineMessages</span></code> behaves differently than <code class=\"docutils literal notranslate\"><span class=\"pre\">defineMessages</span></code> in react-intl.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">i18n.defineMessages</span></code> creates an object of lazy translations, while\n<code class=\"docutils literal notranslate\"><span class=\"pre\">defineMessages</span></code> creates message descriptors.</p>\n<p>If all you need is to create message descriptors, simply drop <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n.defineMessages</span></code>:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// messages.js</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/macro`</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">languages</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"nx\">en</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`English`</span><span class=\"p\">,</span>\n   <span class=\"nx\">cs</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`Czech`</span><span class=\"p\">,</span>\n   <span class=\"nx\">fr</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`French`</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// app.js</span>\n<span class=\"c1\">// Later in the code we need to pass message descriptors to ``i18n`` object:</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">setupI18n</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/core`</span>\n\n<span class=\"c1\">// Setup i18n and load messages</span>\n<span class=\"kr\">const</span> <span class=\"nx\">i18n</span> <span class=\"o\">=</span> <span class=\"nx\">setupI18n</span><span class=\"p\">()</span>\n<span class=\"nx\">i18n</span><span class=\"p\">(</span><span class=\"nx\">languages</span><span class=\"p\">.</span><span class=\"nx\">en</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Compare to this example using lazy translations with <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n.defineMessages</span></code>:</p>\n<div class=\"last highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// messages.js</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">setupI18n</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/core`</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/macro`</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">i18n</span> <span class=\"o\">=</span> <span class=\"nx\">setupI18n</span><span class=\"p\">()</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">languages</span> <span class=\"o\">=</span> <span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">defineMessages</span><span class=\"p\">({</span>\n   <span class=\"nx\">en</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`English`</span><span class=\"p\">,</span>\n   <span class=\"nx\">cs</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`Czech`</span><span class=\"p\">,</span>\n   <span class=\"nx\">fr</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`French`</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// app.js</span>\n<span class=\"c1\">// Later in the code, simply call lazy message:</span>\n<span class=\"nx\">languages</span><span class=\"p\">.</span><span class=\"nx\">en</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// If you need to access message ID, use ``id`` atribute:</span>\n<span class=\"nx\">i18n</span><span class=\"p\">(</span><span class=\"nx\">languages</span><span class=\"p\">.</span><span class=\"nx\">en</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>Lazy translations are usually defined in different scope than evaluated. Parameters\nare therefore unknown, but we still need to know their names, so we can create placeholders\nin MessageFormat. <code class=\"docutils literal notranslate\"><span class=\"pre\">arg</span></code> macro is used exactly for that:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// Macro</span>\n<span class=\"kr\">const</span> <span class=\"nx\">books</span> <span class=\"o\">=</span> <span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">lazy</span><span class=\"p\">(</span><span class=\"nx\">plural</span><span class=\"p\">({</span>\n   <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"nx\">arg</span><span class=\"p\">(</span><span class=\"s1\">&#39;count&#39;</span><span class=\"p\">),</span>\n   <span class=\"nx\">one</span><span class=\"o\">:</span> <span class=\"s1\">&#39;# book&#39;</span><span class=\"p\">,</span>\n   <span class=\"nx\">other</span><span class=\"o\">:</span> <span class=\"s1\">&#39;# books&#39;</span>\n<span class=\"p\">}))</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">translation</span> <span class=\"o\">=</span> <span class=\"nx\">books</span><span class=\"p\">({</span> <span class=\"nx\">count</span><span class=\"o\">:</span> <span class=\"mi\">42</span> <span class=\"p\">})</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"extracting-messages\">\n<h2>Extracting messages<a class=\"headerlink\" href=\"#extracting-messages\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Messages are extracted from code already transformed by macros. This makes macros\ncompletely optional and extraction will work also with message descriptors created\nmanually.</p>\n<p>Extract script will look for  a <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> comments:</p>\n<div class=\"highlight-js notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cm\">/*i18n*/</span><span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Message&#39;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>An object after such comment is considered as message descriptor and extracted.</p>\n<p>Description of message can be optionally added in this comment:</p>\n<div class=\"highlight-js notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cm\">/*i18n: Description*/</span><span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Message&#39;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Macros generate these comments automatically. It’s necessary to write them manually\nonly if we don’t use macros at all or in case we want to add a message description.</p>\n</div>\n</div>\n<div class=\"section\" id=\"summary\">\n<h2>Summary<a class=\"headerlink\" href=\"#summary\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The API solves following issues:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://github.com/lingui/js-lingui/issues/197\">#197</a> - Add metadata to messages</li>\n<li><a class=\"reference external\" href=\"https://github.com/lingui/js-lingui/issues/197\">#258</a> - i18Mark should accept default value</li>\n</ul>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">i18Mark</span></code> will become obsolete by these macros.</p>\n<div class=\"section\" id=\"common-catalogs\">\n<h3>Common catalogs<a class=\"headerlink\" href=\"#common-catalogs\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Feature request from #258, implemented using <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n.defineMessages</span></code>:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">defineMessages</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"sb\">`@lingui/macro`</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">defineMessages</span><span class=\"p\">({</span>\n   <span class=\"nx\">yes</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`Yes`</span><span class=\"p\">,</span>\n   <span class=\"nx\">no</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`No`</span><span class=\"p\">,</span>\n   <span class=\"nx\">cancel</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`Cancel`</span><span class=\"p\">,</span>\n   <span class=\"nx\">confirmDelete</span><span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"sb\">`Do you really want to delete </span><span class=\"si\">${</span><span class=\"nx\">arg</span><span class=\"p\">(</span><span class=\"s2\">&quot;filename&quot;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sb\">?`</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>Catalogs are type-checked by default:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">common</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./common&#39;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">common</span><span class=\"p\">.</span><span class=\"nx\">confirmDelete</span><span class=\"p\">({</span> <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s2\">&quot;common.js&quot;</span> <span class=\"p\">}))</span>\n\n<span class=\"c1\">// These examples would throw type error:</span>\n<span class=\"c1\">// common.confrmDelete()  // unknown attribute `confrmDelete` (typo)</span>\n<span class=\"c1\">// common.confirmDelete()  // missing first argument</span>\n<span class=\"c1\">// common.confirmDelete({ flname: &quot;common.js&quot; })  // invalid object type (typo)</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n","toc":"<ul>\n<li><a class=\"reference internal\" href=\"#\">001 - Macros for message descriptors</a><ul>\n<li><a class=\"reference internal\" href=\"#background\">Background</a></li>\n<li><a class=\"reference internal\" href=\"#proposal\">Proposal</a><ul>\n<li><a class=\"reference internal\" href=\"#message-used-as-id\">Message used as ID</a><ul>\n<li><a class=\"reference internal\" href=\"#plurals-and-other-formatters\">plurals and other formatters</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#messages-with-custom-ids\">Messages with custom IDs</a></li>\n<li><a class=\"reference internal\" href=\"#description\">Description</a></li>\n<li><a class=\"reference internal\" href=\"#lazy-translations\">Lazy translations</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#extracting-messages\">Extracting messages</a></li>\n<li><a class=\"reference internal\" href=\"#summary\">Summary</a><ul>\n<li><a class=\"reference internal\" href=\"#common-catalogs\">Common catalogs</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"}}