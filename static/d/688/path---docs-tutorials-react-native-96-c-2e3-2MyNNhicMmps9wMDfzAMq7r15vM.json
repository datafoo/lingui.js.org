{"pageContext":{"title":"Tutorial - Internationalization of React Native apps","body":"<div class=\"section\" id=\"tutorial-internationalization-of-react-native-apps\">\n<h1>Tutorial - Internationalization of React Native apps<a class=\"headerlink\" href=\"#tutorial-internationalization-of-react-native-apps\" title=\"Permalink to this headline\">¶</a></h1>\n<p>In this tutorial, we’ll learn how to add internationalization\nto an existing application in React Native. The React Native tutorial is largely similar to the one for <a class=\"reference internal\" href=\"../react/#react-tutorial-label\"><span class=\"std std-ref\">React</span></a>, and we highly recommend you check out that tutorial first because it covers installation, setup and other topics. Here we will cover parts that are relevant for React Native and hopefully answer all questions you may have.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The latest version of <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;lingui/react</span></code> working out-of-the-box for React Native on Android is 2.2. Newer versions depend on the <a class=\"reference external\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl object</a> which is not available on the JavaScriptCore that is used on Android by default. See the <a class=\"reference external\" href=\"https://github.com/react-community/jsc-android-buildscripts\">JSC build scripts for Android</a> for possible solution or use the <a class=\"reference external\" href=\"https://github.com/andyearnshaw/Intl.js/\">Intl polyfill</a>.</p>\n</div>\n<p>If you’re looking for a working solution, check out the <a class=\"reference external\" href=\"https://exp.host/&#64;vonovak/js-lingui-demo\">demo on Expo</a>. The source code is <a class=\"reference external\" href=\"https://github.com/vonovak/js-lingui-demo\">available here</a>.</p>\n<div class=\"section\" id=\"let-s-start\">\n<h2>Let’s Start<a class=\"headerlink\" href=\"#let-s-start\" title=\"Permalink to this headline\">¶</a></h2>\n<p>We’re going to translate the following app:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">StyleSheet</span><span class=\"p\">,</span> <span class=\"nx\">Text</span><span class=\"p\">,</span> <span class=\"nx\">View</span><span class=\"p\">,</span> <span class=\"nx\">Alert</span><span class=\"p\">,</span> <span class=\"nx\">SafeAreaView</span><span class=\"p\">,</span> <span class=\"nx\">Button</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-native&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">App</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"k\">return</span> <span class=\"p\">(</span>\n     <span class=\"p\">&lt;</span><span class=\"nt\">Inbox</span>\n       <span class=\"na\">username</span><span class=\"o\">=</span><span class=\"s\">&quot;John&quot;</span>\n       <span class=\"na\">markAsRead</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">showAlert</span><span class=\"p\">}</span>\n       <span class=\"na\">messages</span><span class=\"o\">=</span><span class=\"p\">{[]}</span>\n     <span class=\"p\">/&gt;</span>\n   <span class=\"p\">);</span>\n <span class=\"p\">}</span>\n\n <span class=\"nx\">showAlert</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n   <span class=\"nx\">Alert</span><span class=\"p\">.</span><span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Do you want to set all your messages as read?&#39;</span><span class=\"p\">);</span>\n <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">Inbox</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">messages</span><span class=\"p\">,</span> <span class=\"nx\">markAsRead</span><span class=\"p\">,</span> <span class=\"nx\">username</span> <span class=\"p\">})</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"kr\">const</span> <span class=\"nx\">messagesCount</span> <span class=\"o\">=</span> <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n\n <span class=\"k\">return</span> <span class=\"p\">(</span>\n   <span class=\"p\">&lt;</span><span class=\"nt\">SafeAreaView</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">container</span><span class=\"p\">}&gt;</span>\n     <span class=\"p\">&lt;</span><span class=\"nt\">View</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">container2</span><span class=\"p\">}&gt;</span>\n       <span class=\"p\">&lt;</span><span class=\"nt\">Text</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">heading</span><span class=\"p\">}&gt;</span><span class=\"nx\">Message</span> <span class=\"nx\">Inbox</span><span class=\"p\">&lt;/</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n\n       <span class=\"p\">&lt;</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n         <span class=\"nx\">See</span> <span class=\"nx\">all</span> <span class=\"nx\">unread</span> <span class=\"nx\">messages</span> <span class=\"nx\">or</span>\n       <span class=\"p\">&lt;/</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n       <span class=\"p\">&lt;</span><span class=\"nt\">Button</span> <span class=\"na\">onPress</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">markAsRead</span><span class=\"p\">}</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">&quot;mark messages as read&quot;</span> <span class=\"p\">/&gt;</span>\n\n       <span class=\"p\">&lt;</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n         <span class=\"p\">{</span><span class=\"nx\">messagesCount</span> <span class=\"o\">===</span> <span class=\"mi\">1</span>\n           <span class=\"o\">?</span> <span class=\"sb\">`There&#39;s {messagesCount} message in your inbox.`</span>\n           <span class=\"o\">:</span> <span class=\"sb\">`There&#39;re </span><span class=\"si\">${</span><span class=\"nx\">messagesCount</span><span class=\"si\">}</span><span class=\"sb\"> messages in your inbox.`</span><span class=\"p\">}</span>\n       <span class=\"p\">&lt;/</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n     <span class=\"p\">&lt;/</span><span class=\"nt\">View</span><span class=\"p\">&gt;</span>\n\n     <span class=\"p\">&lt;</span><span class=\"nt\">Text</span><span class=\"p\">&gt;{</span><span class=\"nx\">username</span><span class=\"p\">}.&lt;/</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n   <span class=\"p\">&lt;/</span><span class=\"nt\">SafeAreaView</span><span class=\"p\">&gt;</span>\n <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n<p>As you can see, it’s a simple mailbox application with only one screen.</p>\n</div>\n<div class=\"section\" id=\"introducing-internationalization\">\n<h2>Introducing internationalization<a class=\"headerlink\" href=\"#introducing-internationalization\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Not surprisingly, this part isn’t too different from the <a class=\"reference internal\" href=\"../react/#react-tutorial-label\"><span class=\"std std-ref\">React tutorial</span></a>.</p>\n<p>Let’s use the <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a> macro first. Don’t forget that we need to wrap our root\ncomponent with the <a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a> so we can set the active language\nand load catalogs:</p>\n<p>Let’s translate the screen heading:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">I18nProvider</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/react&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Trans</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">I18nProvider</span> <span class=\"na\">language</span><span class=\"o\">=</span><span class=\"s\">&quot;en&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">YourRootComponent</span> <span class=\"na\">someProp</span><span class=\"o\">=</span><span class=\"s\">&quot;someValue&quot;</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">I18nProvider</span><span class=\"p\">&gt;</span>\n\n<span class=\"c1\">// later on somewhere deep in the React component tree:</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">Text</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">heading</span><span class=\"p\">}&gt;&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Message</span> <span class=\"nx\">Inbox</span><span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>This was easy. Now, the next step is to translate the <code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code> prop of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;Button&gt;</span></code> component. But wait a sec, the button expects to receive a <code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code>, so\nwe cannot use the <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a> macro here! Also notice that the <code class=\"docutils literal notranslate\"><span class=\"pre\">Alert.alert</span></code>\ncall requires a string as well.</p>\n<p>Luckily, there is a simple solution: the <a class=\"reference internal\" href=\"../../ref/react/#component-I18n\">&lt;I18n&gt;</a> is a render prop component\nwhich gives us an <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> prop that we can use like this: <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n._(t`this</span> <span class=\"pre\">will</span> <span class=\"pre\">be</span> <span class=\"pre\">translated`)</span></code>\nand the result of such a call is a string. Let’s see how to do this!</p>\n<div class=\"admonition hint\">\n<p class=\"first admonition-title\">Hint</p>\n<p class=\"last\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> object is covered in greater detail in the <a class=\"reference internal\" href=\"../javascript/#js-tutorial-label\"><span class=\"std std-ref\">JavaScript tutorial</span></a>.</p>\n</div>\n<p>Under the hood, <a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a> creates an instance of the <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> object\nautomatically and passes it to <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> components through React Context.\nThe <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> components then use the instance to get the translations from it.\nIf we cannot use the <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> component, we can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">I18n</span></code> render prop\ncomponent to get hold of the <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> object ourselves and get the translations from it.</p>\n<p>So, we need to do two things: first, we need to setup the <a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a> and\nthen we can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">I18n</span></code> render prop component, as shown in the following simplified\nexample:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">I18nProvider</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/react&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"nx\">Trans</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">I18nProvider</span> <span class=\"na\">language</span><span class=\"o\">=</span><span class=\"s\">&quot;en&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">YourRootComponent</span> <span class=\"na\">someProp</span><span class=\"o\">=</span><span class=\"s\">&quot;someValue&quot;</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">I18nProvider</span><span class=\"p\">&gt;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">Inbox</span> <span class=\"o\">=</span> <span class=\"p\">(({</span> <span class=\"nx\">markAsRead</span> <span class=\"p\">})</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">View</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">View</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">Text</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">heading</span><span class=\"p\">}&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Message</span> <span class=\"nx\">Inbox</span><span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">See</span> <span class=\"nx\">all</span> <span class=\"nx\">unread</span> <span class=\"nx\">messages</span> <span class=\"nx\">or</span><span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">{</span><span class=\"cm\">/* you can also use the withI18n HOC */</span><span class=\"p\">}</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">I18n</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">{({</span> <span class=\"nx\">i18n</span> <span class=\"p\">})</span> <span class=\"p\">=&gt;</span> <span class=\"p\">(</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">Button</span> <span class=\"na\">onPress</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">markAsRead</span><span class=\"p\">}</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">_</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"sb\">`mark messages as read`</span><span class=\"p\">)}</span> <span class=\"p\">/&gt;</span>\n          <span class=\"p\">)}</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">I18n</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">View</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// later on somewhere deep in the React component tree:</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">Inbox</span> <span class=\"na\">markAsRead</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">showAlert</span><span class=\"p\">}</span> <span class=\"p\">/&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">There are several ways to render translations: You may use the the <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> component, the <code class=\"docutils literal notranslate\"><span class=\"pre\">withI18n</span></code> HOC or the <a class=\"reference internal\" href=\"../../ref/react/#component-I18n\">&lt;I18n&gt;</a> component that provides a render prop. The important thing about all of these approaches is that when you change the active language (through the <code class=\"docutils literal notranslate\"><span class=\"pre\">language</span></code> prop passed to <a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a>), all the components that show translated text will re-render, making sure the UI shows the correct translations. All of these approaches are equivalent in their result.</p>\n</div>\n</div>\n<div class=\"section\" id=\"internationalization-outside-of-react-components\">\n<h2>Internationalization Outside of React Components<a class=\"headerlink\" href=\"#internationalization-outside-of-react-components\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Until now, we have covered the <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a> macro and the <a class=\"reference internal\" href=\"../../ref/react/#component-I18n\">&lt;I18n&gt;</a> render\nprop component. Using them will make sure our components are always in sync with the\ncurrently active language.</p>\n<p>However, often you’ll need to show localized strings outside of React, for example when\nyou want to show a toast from some business logic code. In that case you’ll also need\naccess to the <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> object, but you don’t want to pass it around from some component’s\nprops. At this point, we need to turn our attention to the <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;lingui/core</span></code> package,\nnamely the <a class=\"reference internal\" href=\"../../ref/core/#setupI18n\" title=\"setupI18n\"><code class=\"xref js js-func docutils literal notranslate\"><span class=\"pre\">setupI18n()</span></code></a> method which returns an <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> object.</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">setupI18n</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/core&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// this file is generated by the cli</span>\n<span class=\"kr\">import</span> <span class=\"nx\">enMessages</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./locale/en/messages.js&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// import this constant as get translations from it outside of React</span>\n<span class=\"kr\">export</span> <span class=\"kr\">const</span> <span class=\"nx\">i18n</span> <span class=\"o\">=</span> <span class=\"nx\">setupI18n</span><span class=\"p\">({</span>\n <span class=\"nx\">language</span><span class=\"o\">:</span> <span class=\"s1\">&#39;en&#39;</span><span class=\"p\">,</span>\n <span class=\"nx\">catalogs</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n   <span class=\"nx\">en</span><span class=\"o\">:</span> <span class=\"nx\">enMessages</span><span class=\"p\">,</span>\n <span class=\"p\">},</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n<p>As explained before, <a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a> creates an instance of the <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> object\nautomatically and passes it to <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> components through React Context.\nSince we created the <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> instance by ourselves, we need to pass it to the\n<a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a> as a prop. This way we tell it not to create a new instance\nbut use the one we provide, like this:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">I18nProvider</span> <span class=\"na\">i18n</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">18</span><span class=\"nx\">n</span><span class=\"p\">}</span> <span class=\"na\">language</span><span class=\"o\">=</span><span class=\"s\">&quot;en&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">YourRootComponent</span> <span class=\"na\">someProp</span><span class=\"o\">=</span><span class=\"s\">&quot;someValue&quot;</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">I18nProvider</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Now we’re ready to show correctly translated strings anywhere in our app! Just import\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> object into your non-react code and use it, for example like this:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">i18n._(t`this</span> <span class=\"pre\">will</span> <span class=\"pre\">be</span> <span class=\"pre\">translated`)</span></code>.</p>\n<p>The last remaining piece of the puzzle is changing the active language. The <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code>\nobject exposes two methods for that: <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n.load(catalogs)</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n.activate(language)</span></code>.\nJust call the two methods, pass the changed <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> object and the new active language\nto the <a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a> and <code class=\"docutils literal notranslate\"><span class=\"pre\">js-lingui</span></code> takes care of the rest. It all becomes\nclear when you take a look at the <a class=\"reference external\" href=\"https://github.com/vonovak/js-lingui-demo/blob/master/App.js\">final code</a>.</p>\n</div>\n<div class=\"section\" id=\"rendering-of-translations\">\n<h2>Rendering of Translations<a class=\"headerlink\" href=\"#rendering-of-translations\" title=\"Permalink to this headline\">¶</a></h2>\n<p>As described in the <a class=\"reference internal\" href=\"../../ref/react/#rendering-translations\"><span class=\"std std-ref\">reference</span></a>, by default, translation components render translation as a text without a wrapping tag. In React Native though, all text must be wrapped in the &lt;Text&gt; component. This means we would need to use the <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> component like this:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">Text</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Message</span> <span class=\"nx\">Inbox</span><span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>You’ll surely agree the &lt;Text&gt; component looks a little redundant. That’s why the <a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a> component accepts a <code class=\"docutils literal notranslate\"><span class=\"pre\">defaultRender</span></code> prop. Just supply the &lt;Text&gt; component as the <code class=\"docutils literal notranslate\"><span class=\"pre\">defaultRender</span></code> prop and the previous example can be simplified to:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Message</span> <span class=\"nx\">Inbox</span><span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Alternatively, you may override the default locally on the i18n components, using the <code class=\"docutils literal notranslate\"><span class=\"pre\">render</span></code> prop. This is also documented in the <a class=\"reference internal\" href=\"../../ref/react/#rendering-translations\"><span class=\"std std-ref\">reference</span></a>.</p>\n</div>\n<div class=\"section\" id=\"nesting-components\">\n<h2>Nesting Components<a class=\"headerlink\" href=\"#nesting-components\" title=\"Permalink to this headline\">¶</a></h2>\n<p>It is worth mentioning that the <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a> macro and &lt;Text&gt; component\nmay be nested, for example to achieve the effect shown in the picture. This is thanks to\nhow React Native <a class=\"reference external\" href=\"https://facebook.github.io/react-native/docs/text#nested-text\">handles nested text</a>.</p>\n<img alt=\"../../_images/rn-component-nesting.png\" src=\"../../_images/rn-component-nesting.png\" />\n<p>This can be achieved by the following code:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">Text</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"p\">{{</span> <span class=\"nx\">fontSize</span><span class=\"o\">:</span> <span class=\"mi\">20</span> <span class=\"p\">}}&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span><span class=\"nx\">Concert</span> <span class=\"k\">of</span> <span class=\"p\">&lt;/</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">Text</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"p\">{{</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s1\">&#39;green&#39;</span> <span class=\"p\">}}&gt;</span><span class=\"nx\">Green</span> <span class=\"nx\">Day</span><span class=\"p\">&lt;/</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">Text</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"p\">{{</span> <span class=\"nx\">fontWeight</span><span class=\"o\">:</span> <span class=\"s1\">&#39;bold&#39;</span> <span class=\"p\">}}&gt;</span> <span class=\"nx\">tonight</span><span class=\"o\">!</span><span class=\"p\">&lt;/</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">Text</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>The extracted string for translation will look like this:</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;&lt;0&gt;&lt;1&gt;Concert</span> <span class=\"pre\">of</span> <span class=\"pre\">&lt;/1&gt;&lt;2&gt;Green</span> <span class=\"pre\">Day&lt;/2&gt;&lt;3&gt;</span> <span class=\"pre\">tonight!&lt;/3&gt;&lt;/0&gt;&quot;</span></code></p>\n<p>The important point here is that the sentence isn’t broken into pieces but remains together - that will allow the translator to deliver a quality result.</p>\n</div>\n<div class=\"section\" id=\"further-reading\">\n<h2>Further reading<a class=\"headerlink\" href=\"#further-reading\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"../ref/react.html\">&#64;lingui/react reference documentation</a></li>\n<li><a class=\"reference external\" href=\"../ref/cli.html\">&#64;lingui/cli reference documentation</a></li>\n<li><a class=\"reference external\" href=\"../guides/plurals.html\">Pluralization Guide</a></li>\n</ul>\n</div>\n</div>\n","toc":"<ul>\n<li><a class=\"reference internal\" href=\"#\">Tutorial - Internationalization of React Native apps</a><ul>\n<li><a class=\"reference internal\" href=\"#let-s-start\">Let’s Start</a></li>\n<li><a class=\"reference internal\" href=\"#introducing-internationalization\">Introducing internationalization</a></li>\n<li><a class=\"reference internal\" href=\"#internationalization-outside-of-react-components\">Internationalization Outside of React Components</a></li>\n<li><a class=\"reference internal\" href=\"#rendering-of-translations\">Rendering of Translations</a></li>\n<li><a class=\"reference internal\" href=\"#nesting-components\">Nesting Components</a></li>\n<li><a class=\"reference internal\" href=\"#further-reading\">Further reading</a></li>\n</ul>\n</li>\n</ul>\n"}}