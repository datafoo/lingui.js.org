{"pageContext":{"title":"Tutorial - Internationalization of React apps","body":"<div class=\"section\" id=\"tutorial-internationalization-of-react-apps\">\n<span id=\"react-tutorial-label\"></span><h1>Tutorial - Internationalization of React apps<a class=\"headerlink\" href=\"#tutorial-internationalization-of-react-apps\" title=\"Permalink to this headline\">¶</a></h1>\n<p>Through this tutorial, we’ll learn how to add internationalization\nto an existing application in React JS.</p>\n<div class=\"section\" id=\"let-s-start\">\n<h2>Let’s Start<a class=\"headerlink\" href=\"#let-s-start\" title=\"Permalink to this headline\">¶</a></h2>\n<p>We’re going to translate the following app:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// index.js</span>\n<span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-dom&#39;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">Inbox</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./Inbox.js&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">&lt;</span><span class=\"nt\">Inbox</span> <span class=\"p\">/&gt;</span>\n\n<span class=\"nx\">render</span><span class=\"p\">(&lt;</span><span class=\"nt\">App</span> <span class=\"p\">/&gt;,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;app&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// Inbox.js</span>\n<span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">Inbox</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">messages</span><span class=\"p\">,</span> <span class=\"nx\">markAsRead</span><span class=\"p\">,</span> <span class=\"nx\">user</span> <span class=\"p\">})</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n   <span class=\"kr\">const</span> <span class=\"nx\">messagesCount</span> <span class=\"o\">=</span> <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span>\n   <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">lastLogin</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">user</span>\n\n   <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span><span class=\"nx\">Message</span> <span class=\"nx\">Inbox</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n          <span class=\"nx\">See</span> <span class=\"nx\">all</span> <span class=\"p\">&lt;</span><span class=\"nt\">Link</span> <span class=\"na\">to</span><span class=\"o\">=</span><span class=\"s\">&quot;/unread&quot;</span><span class=\"p\">&gt;</span><span class=\"nx\">unread</span> <span class=\"nx\">messages</span><span class=\"p\">&lt;/</span><span class=\"nt\">Link</span><span class=\"p\">&gt;{</span><span class=\"s2\">&quot; or &quot;</span><span class=\"p\">}</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">markAsRead</span><span class=\"p\">}&gt;</span><span class=\"nx\">mark</span> <span class=\"nx\">them</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span> <span class=\"nx\">as</span> <span class=\"nx\">read</span><span class=\"p\">.</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">{</span>\n            <span class=\"nx\">messagesCount</span> <span class=\"o\">===</span> <span class=\"mi\">1</span>\n              <span class=\"o\">?</span> <span class=\"s2\">&quot;There&#39;s {messagesCount} message in your inbox.&quot;</span>\n              <span class=\"o\">:</span> <span class=\"s2\">&quot;There&#39;re {messagesCount} messages in your inbox.&quot;</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\n        <span class=\"p\">&lt;</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span>\n          <span class=\"nx\">Last</span> <span class=\"nx\">login</span> <span class=\"nx\">on</span> <span class=\"p\">{</span><span class=\"nx\">lastLogin</span><span class=\"p\">}.</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>As you can see, it’s a simple mailbox application with only one page.</p>\n</div>\n<div class=\"section\" id=\"installing-linguijs\">\n<h2>Installing LinguiJS<a class=\"headerlink\" href=\"#installing-linguijs\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Follow setup guide either for projects using <a class=\"reference internal\" href=\"../setup-cra/\"><span class=\"doc\">LinguiJS with Create React App</span></a>\nor for general <a class=\"reference internal\" href=\"../setup-react/\"><span class=\"doc\">React projects</span></a>.</p>\n</div>\n<div class=\"section\" id=\"setup\">\n<h2>Setup<a class=\"headerlink\" href=\"#setup\" title=\"Permalink to this headline\">¶</a></h2>\n<p>We will directly start translating the <code class=\"docutils literal notranslate\"><span class=\"pre\">Inbox</span></code> component, but we need\nto complete one more step to setup our application.</p>\n<p>Components needs to be aware of their active language. All <a class=\"reference external\" href=\"https://github.com/lingui/js-lingui\">LinguiJS</a> components\nread translations and language settings from the React context. In order to get this\ninformation into the context, we need to wrap our application in\n<a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a> component.</p>\n<p>Let’s add all required imports and wrap our app inside <a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a>:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// index.js</span>\n<span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-dom&#39;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">Inbox</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./Inbox.js&#39;</span>\n\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">I18nProvider</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/react&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">(</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">I18nProvider</span> <span class=\"na\">language</span><span class=\"o\">=</span><span class=\"s\">&quot;en&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">Inbox</span> <span class=\"p\">/&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">I18nProvider</span><span class=\"p\">&gt;</span>\n<span class=\"p\">)</span>\n\n<span class=\"nx\">render</span><span class=\"p\">(&lt;</span><span class=\"nt\">App</span> <span class=\"p\">/&gt;,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;app&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"admonition hint\">\n<p class=\"first admonition-title\">Hint</p>\n<p>You might be wondering: how are we going to change the active language?\nYes, that’s a great question, but we need to focus! We’re not going to change\nthe language unless we have translated the message catalog. And we won’t have\ntranslated the catalog before we extract all messages from source.</p>\n<p class=\"last\">Let’s deal with language switching later… but if you’re still curious,\ntake a look at <a class=\"reference internal\" href=\"../../guides/dynamic-loading-catalogs/#dynamic-loading-catalogs\"><span class=\"std std-ref\">example</span></a> with Redux and Webpack.</p>\n</div>\n</div>\n<div class=\"section\" id=\"introducing-internationalization\">\n<h2>Introducing internationalization<a class=\"headerlink\" href=\"#introducing-internationalization\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Now we’re finally going to <em>translate</em> our app. Actually, we aren’t going\nto <em>translate</em> from one language to another right now. Instead, we’re going to\n<em>prepare</em> our app for translation. This process is called\n<em>internationalization</em> and you should practice saying this word aloud until\nyou’re able to say it three times very quickly.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">From now on, <em>internationalization</em> will be shortened to a common numeronym <em>i18n</em>.</p>\n</div>\n<p>Let’s start with the basics - static messages. These messages don’t have any variables,\nHTML or components inside. Just some text:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span><span class=\"nx\">Message</span> <span class=\"nx\">Inbox</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>All we need to make this heading translatable is wrap it in <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a>\nmacro:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Trans</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span><span class=\"p\">;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Message</span> <span class=\"nx\">Inbox</span><span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"macros-vs-components\">\n<h3>Macros vs. Components<a class=\"headerlink\" href=\"#macros-vs-components\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If you’re wondering what are macros and what’s the difference between macros and\ncomponents, this short paragraph is for you.</p>\n<p>In general, macros are executed at compile time and they transform source code in\nsome way. We use this feature in <a class=\"reference external\" href=\"https://github.com/lingui/js-lingui\">LinguiJS</a> to simplify writing messages.</p>\n<p>Under the hood, all JSX macros are transformed into <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> component.\nTake a look at this short example. This is what we write:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Trans</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Hello</span> <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"p\">}&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>And this is how the code is transformed:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Trans</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/react&#39;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">Trans</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;Hello {name}&quot;</span> <span class=\"na\">values</span><span class=\"o\">=</span><span class=\"p\">{{</span> <span class=\"nx\">name</span> <span class=\"p\">}}</span> <span class=\"p\">/&gt;</span>\n</pre></div>\n</div>\n<p>See the difference? <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> component receives <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> prop with a message\nin ICU MessageFormat syntax. We could write it manually, but it’s just easier\nand shorter to write JSX as we’re used to and let macros to generate message for\nourselves.</p>\n</div>\n<div class=\"section\" id=\"extracting-messages\">\n<h3>Extracting messages<a class=\"headerlink\" href=\"#extracting-messages\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Back to our project. It’s nice to use JSX and let macros generate messages under the\nhood. Let’s check that it actually works correctly.</p>\n<p>All messages from the source code must be extracted into external message catalogs.\nMessage catalogs are interchange files between developers and translators. We’re\ngoing to have one file per language. Let’s enter command line for a while.</p>\n<p>We’re going to use <cite>CLI</cite> again. Run <a class=\"reference internal\" href=\"../../ref/cli/#lingui-cli-extract\"><code class=\"xref std std-cli docutils literal notranslate\"><span class=\"pre\">extract</span></code></a> command to extract messages:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ lingui extract\n\nNo locales defined!\n\n(use &quot;lingui add-locale &lt;language&gt;&quot; to add one)\n</pre></div>\n</div>\n<p>Oops! Seems we forgot something. First we need to tell the CLI what locales we’re\ngoing to use in our app. Let’s start with two locales: <code class=\"docutils literal notranslate\"><span class=\"pre\">en</span></code> for English and <code class=\"docutils literal notranslate\"><span class=\"pre\">cs</span></code>\nfor Czech:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ lingui add-locale en cs\n\nAdded locale en.\nAdded locale cs.\n\n(use &quot;lingui extract&quot; to extract messages)\n</pre></div>\n</div>\n<p>Everything went well and CLI guides us what to do next. Let’s run <a class=\"reference internal\" href=\"../../ref/cli/#lingui-cli-extract\"><code class=\"xref std std-cli docutils literal notranslate\"><span class=\"pre\">extract</span></code></a> command\nagain:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ lingui extract\n\nCatalog statistics:\n┌──────────┬─────────────┬─────────┐\n│ Language │ Total count │ Missing │\n├──────────┼─────────────┼─────────┤\n│ cs       │      1      │    1    │\n│ en       │      1      │    1    │\n└──────────┴─────────────┴─────────┘\n\n(use &quot;lingui add-locale &lt;language&gt;&quot; to add more locales)\n(use &quot;lingui extract&quot; to update catalogs with new messages)\n(use &quot;lingui compile&quot; to compile catalogs for production)\n</pre></div>\n</div>\n<p>Nice! It seems it worked, we have two message catalogs (one per each locale) with\n1 message each. Let’s take a look at file <code class=\"docutils literal notranslate\"><span class=\"pre\">locale/cs/messages.json</span></code></p>\n<div class=\"highlight-json notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n   <span class=\"nt\">&quot;Message Inbox&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&quot;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>That’s the message we’ve wrapped inside <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a> macro!</p>\n<p>Let’s add a Czech translation:</p>\n<div class=\"highlight-json notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n   <span class=\"nt\">&quot;Message Inbox&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Příchozí zprávy&quot;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>If we run <a class=\"reference internal\" href=\"../../ref/cli/#lingui-cli-extract\"><code class=\"xref std std-cli docutils literal notranslate\"><span class=\"pre\">extract</span></code></a> command again, we’ll see that all Czech messages are translated:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ lingui extract\n\nCatalog statistics:\n┌──────────┬─────────────┬─────────┐\n│ Language │ Total count │ Missing │\n├──────────┼─────────────┼─────────┤\n│ cs       │      1      │    0    │\n│ en       │      1      │    1    │\n└──────────┴─────────────┴─────────┘\n\n(use &quot;lingui add-locale &lt;language&gt;&quot; to add more locales)\n(use &quot;lingui extract&quot; to update catalogs with new messages)\n(use &quot;lingui compile&quot; to compile catalogs for production)\n</pre></div>\n</div>\n<p>That’s great! So, how we’re going to load it into your app? <a class=\"reference external\" href=\"https://github.com/lingui/js-lingui\">LinguiJS</a> introduces\nconcept of compiled message catalogs. Before we load messages into your app, we need\nto compile them. As you see in the help in command output, we use <a class=\"reference internal\" href=\"../../ref/cli/#lingui-cli-compile\"><code class=\"xref std std-cli docutils literal notranslate\"><span class=\"pre\">compile</span></code></a> for that:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ lingui compile\n\nCompiling message catalogs…\nDone!\n</pre></div>\n</div>\n<p>What just happened? If you look inside <code class=\"docutils literal notranslate\"><span class=\"pre\">locale</span></code> directory, you’ll see there’s a\nnew file for each locale: <code class=\"docutils literal notranslate\"><span class=\"pre\">messages.js</span></code>. This file contains compiled message catalogs\nbut also any locale specific data like plurals.</p>\n<p>Let’s load this file into our app and set active language to <code class=\"docutils literal notranslate\"><span class=\"pre\">cs</span></code>:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// index.js</span>\n<span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-dom&#39;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">Inbox</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./Inbox.js&#39;</span>\n<span class=\"hll\"><span class=\"kr\">import</span> <span class=\"nx\">catalogCs</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./locale/cs/messages.js&#39;</span>\n</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">I18nProvider</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/react&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">(</span>\n<span class=\"hll\">  <span class=\"p\">&lt;</span><span class=\"nt\">I18nProvider</span> <span class=\"na\">language</span><span class=\"o\">=</span><span class=\"s\">&quot;cs&quot;</span> <span class=\"na\">catalogs</span><span class=\"o\">=</span><span class=\"p\">{{</span> <span class=\"nx\">cs</span><span class=\"o\">:</span> <span class=\"nx\">catalogCs</span> <span class=\"p\">}}&gt;</span>\n</span>    <span class=\"p\">&lt;</span><span class=\"nt\">Inbox</span> <span class=\"p\">/&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">I18nProvider</span><span class=\"p\">&gt;</span>\n<span class=\"p\">)</span>\n\n<span class=\"nx\">render</span><span class=\"p\">(&lt;</span><span class=\"nt\">App</span> <span class=\"p\">/&gt;,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;app&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>When we run the app, we see the header is translated into Czech.</p>\n</div>\n<div class=\"section\" id=\"summary-of-basic-workflow\">\n<h3>Summary of basic workflow<a class=\"headerlink\" href=\"#summary-of-basic-workflow\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Let’s go through the workflow again:</p>\n<ol class=\"arabic simple\">\n<li>Add an <a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a>, this component sets the active language and loads catalogs</li>\n<li>Wrap messages in <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a> macro</li>\n<li>Run <a class=\"reference internal\" href=\"../../ref/cli/#lingui-cli-extract\"><code class=\"xref std std-cli docutils literal notranslate\"><span class=\"pre\">extract</span></code></a> command to generate message catalogs</li>\n<li>Translate message catalogs (send them to translators usually)</li>\n<li>Run <a class=\"reference internal\" href=\"../../ref/cli/#lingui-cli-compile\"><code class=\"xref std std-cli docutils literal notranslate\"><span class=\"pre\">compile</span></code></a> to create runtime catalogs</li>\n<li>Load runtime catalog</li>\n<li>Profit</li>\n</ol>\n<p>Steps 1 and 7 needs to be done only once per project and locale. Steps 2 to 5 becomes\nthe common workflow how to internationalize the app.</p>\n<p>It isn’t necessary to extract/translate messages one by one. This usually happens\nin batches. When you finalizing your work or PR, run <a class=\"reference internal\" href=\"../../ref/cli/#lingui-cli-extract\"><code class=\"xref std std-cli docutils literal notranslate\"><span class=\"pre\">extract</span></code></a> to generate latest\nmessage catalogs and before building the app for production, run <a class=\"reference internal\" href=\"../../ref/cli/#lingui-cli-compile\"><code class=\"xref std std-cli docutils literal notranslate\"><span class=\"pre\">compile</span></code></a>.</p>\n<p>For more info about CLI, checkout the <a class=\"reference internal\" href=\"../cli/#tutorial-cli\"><span class=\"std std-ref\">CLI tutorial</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"formatting\">\n<h2>Formatting<a class=\"headerlink\" href=\"#formatting\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Let’s move on to another paragraph in our project. This paragraph has some\nvariables, some HTML and components inside:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n   <span class=\"nx\">See</span> <span class=\"nx\">all</span> <span class=\"p\">&lt;</span><span class=\"nt\">Link</span> <span class=\"na\">to</span><span class=\"o\">=</span><span class=\"s\">&quot;/unread&quot;</span><span class=\"p\">&gt;</span><span class=\"nx\">unread</span> <span class=\"nx\">messages</span><span class=\"p\">&lt;/</span><span class=\"nt\">Link</span><span class=\"p\">&gt;{</span><span class=\"s2\">&quot; or &quot;</span><span class=\"p\">}</span>\n   <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">markAsRead</span><span class=\"p\">}&gt;</span><span class=\"nx\">mark</span> <span class=\"nx\">them</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span> <span class=\"nx\">as</span> <span class=\"nx\">read</span><span class=\"p\">.</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Although it looks complex, there’s really nothing special here. Just wrap the content\nof paragraph in <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a> and let the macro do the magic:</p>\n<div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n   <span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n      See all <span class=\"p\">&lt;</span><span class=\"nt\">Link</span> <span class=\"na\">to</span><span class=\"o\">=</span><span class=\"s\">&quot;/unread&quot;</span><span class=\"p\">&gt;</span>unread messages<span class=\"p\">&lt;/</span><span class=\"nt\">Link</span><span class=\"p\">&gt;</span>{&quot; or &quot;}\n      <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">onClick</span><span class=\"o\">=</span><span class=\"s\">{markAsRead}</span><span class=\"p\">&gt;</span>mark them<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span> as read.\n   <span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Spooky, right? Let’s see how this message actually looks in message catalog.\nRun <a class=\"reference internal\" href=\"../../ref/cli/#lingui-cli-extract\"><code class=\"xref std std-cli docutils literal notranslate\"><span class=\"pre\">extract</span></code></a> command and take a look at the message:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">See</span> <span class=\"nb\">all</span> <span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"n\">unread</span> <span class=\"n\">messages</span><span class=\"o\">&lt;/</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"ow\">or</span> <span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"n\">mark</span> <span class=\"n\">them</span><span class=\"o\">&lt;/</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span> <span class=\"k\">as</span> <span class=\"n\">read</span><span class=\"o\">.</span>\n</pre></div>\n</div>\n<p>You may notice that components and html tags are replaced with indexed\ntags (<cite>&lt;0&gt;</cite>, <cite>&lt;1&gt;</cite>). This is a little extension to the ICU MessageFormat which\nallows rich-text formatting inside translations. Components and their props\nremains in the source code and don’t scare our translators. Also, in case we\nchange a <code class=\"docutils literal notranslate\"><span class=\"pre\">className</span></code>, we don’t need to update our message catalogs. How\ncool is that?</p>\n<div class=\"section\" id=\"jsx-to-messageformat-transformations\">\n<h3>JSX to MessageFormat transformations<a class=\"headerlink\" href=\"#jsx-to-messageformat-transformations\" title=\"Permalink to this headline\">¶</a></h3>\n<p>It may look a bit <em>hackish</em> at first sight, but these transformations are\nactually very easy, intuitive and feel very <em>Reactish</em>. We don’t have to think\nabout the MessageFormat, because it’s created by the library. We write our\ncomponents in the same way as we’re used to and simply wrap text in\n<a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a> macro.</p>\n<p>Let’s see some examples with MessageFormat equivalents:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// Expressions</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Hello</span> <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"p\">}&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"c1\">// Hello {name}</span>\n</pre></div>\n</div>\n<p>Any expressions are allowed, not just simple variables. The only difference is,\nthe variable name won’t be included in the extracted message:</p>\n<p>Simple variable -&gt; named argument:</p>\n<blockquote>\n<div><div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Hello</span> <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"p\">}&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"c1\">// Hello {name}</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>Any expression -&gt; positional argument:</p>\n<blockquote>\n<div><div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Hello</span> <span class=\"p\">{</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"c1\">// Hello {0}</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>Object, arrays, function calls -&gt; positional argument:</p>\n<blockquote>\n<div><div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">The</span> <span class=\"nx\">random</span> <span class=\"nx\">number</span> <span class=\"nx\">is</span> <span class=\"p\">{</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">rand</span><span class=\"p\">()}&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"c1\">// The random number is {0}</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>Components might get tricky, but like we saw, it’s really easy:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Read</span> <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;/more&quot;</span><span class=\"p\">&gt;</span><span class=\"nx\">more</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;.&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n<span class=\"c1\">// Read &lt;0&gt;more&lt;/0&gt;.</span>\n</pre></div>\n</div>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n   <span class=\"nx\">Dear</span> <span class=\"nx\">Watson</span><span class=\"p\">,&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>\n   <span class=\"nx\">it</span><span class=\"s1\">&#39;s not exactly what I had in my mind.</span>\n<span class=\"s1\">&lt;/Trans&gt;</span>\n<span class=\"s1\">// Dead Watson,&lt;0/&gt;it&#39;</span><span class=\"nx\">s</span> <span class=\"nx\">not</span> <span class=\"nx\">exactly</span> <span class=\"nx\">what</span> <span class=\"nx\">I</span> <span class=\"nx\">had</span> <span class=\"k\">in</span> <span class=\"nx\">my</span> <span class=\"nx\">mind</span><span class=\"p\">.</span>\n</pre></div>\n</div>\n<p>Obviously, you can also shoot yourself in the foot. Some expressions are <em>valid</em>\nand won’t throw any error, it doesn’t make any sense to write:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// Oh, seriously?</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n   <span class=\"p\">{</span><span class=\"nx\">isOpen</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">&lt;</span><span class=\"nt\">Modal</span> <span class=\"p\">/&gt;}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Everytime you’re in doubt, imagine how the final message should look like.</p>\n</div>\n<div class=\"section\" id=\"message-id\">\n<h3>Message ID<a class=\"headerlink\" href=\"#message-id\" title=\"Permalink to this headline\">¶</a></h3>\n<p>At this point we’re going to explain what message ID is and how to set it manually.</p>\n<p>Translators work with the <em>message catalogs</em> we saw above. No matter what format\nwe use (gettext, xliff, json), it’s just mapping of\nmessage ID to the translation.</p>\n<p>Here’s an example of simple message catalog in <strong>Czech</strong> language:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"58%\" />\n<col width=\"42%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Message ID</th>\n<th class=\"head\">Translation</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td>Monday</td>\n<td>Pondělí</td>\n</tr>\n<tr class=\"row-odd\"><td>Tuesday</td>\n<td>Úterý</td>\n</tr>\n<tr class=\"row-even\"><td>Wednesday</td>\n<td>Středa</td>\n</tr>\n</tbody>\n</table>\n<p>… and the same catalog in <strong>French</strong> language:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"58%\" />\n<col width=\"42%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Message ID</th>\n<th class=\"head\">Translation</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td>Monday</td>\n<td>Lundi</td>\n</tr>\n<tr class=\"row-odd\"><td>Tuesday</td>\n<td>Mardi</td>\n</tr>\n<tr class=\"row-even\"><td>Wednesday</td>\n<td>Mercredi</td>\n</tr>\n</tbody>\n</table>\n<p>The message ID is <em>what all catalogs have in common</em> – Lundi and Pondělí\nrepresent the same message in different languages. It’s also the same as the <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code>\nprop in <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a> macro.</p>\n<p>There are two common approaches to message IDs:</p>\n<ol class=\"arabic simple\">\n<li>Use source language (e.g. English as in example above)</li>\n<li>Use a custom key (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">weekday.monday</span></code>)</li>\n</ol>\n<p>Both approaches have their pros and cons and it’s not in the scope of this tutorial\nto compare them.</p>\n<p>By default, <a class=\"reference external\" href=\"https://github.com/lingui/js-lingui\">LinguiJS</a> generates message ID from the content of <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a>\nmacro, which means it uses source language. However, we can easily override\nit by setting <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> prop manually:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">Trans</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;inbox.title&quot;</span><span class=\"p\">&gt;</span><span class=\"nx\">Message</span> <span class=\"nx\">Inbox</span><span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>This will generate:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">Trans</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;inbox.title&quot;</span> <span class=\"na\">defaults</span><span class=\"o\">=</span><span class=\"s\">&quot;Message Inbox&quot;</span> <span class=\"p\">/&gt;&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>In our message catalog, we’ll see <code class=\"docutils literal notranslate\"><span class=\"pre\">inbox.title</span></code> as message ID, but we also\nget <code class=\"docutils literal notranslate\"><span class=\"pre\">Message</span> <span class=\"pre\">Inbox</span></code> as default translation for English language.</p>\n<p>For the rest of this tutorial, we’ll use auto-generated message IDs to keep\nit simple.</p>\n</div>\n</div>\n<div class=\"section\" id=\"plurals\">\n<h2>Plurals<a class=\"headerlink\" href=\"#plurals\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Let’s move on and add i18n to another text in our component:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n   <span class=\"p\">{</span>\n      <span class=\"nx\">messagesCount</span> <span class=\"o\">===</span> <span class=\"mi\">1</span>\n         <span class=\"o\">?</span> <span class=\"s2\">&quot;There&#39;s {messagesCount} message in your inbox.&quot;</span>\n         <span class=\"o\">:</span> <span class=\"s2\">&quot;There&#39;re {messagesCount} messages in your inbox.&quot;</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>This message is a bit special, because it depends on the value of the <code class=\"docutils literal notranslate\"><span class=\"pre\">messagesCount</span></code>\nvariable. Most languages use different forms of words when describing quantities\n- this is called <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Plural\">pluralization</a>.</p>\n<p>What’s tricky is that different languages use different number of plural forms.\nFor example, English has only two forms - singular and plural - as we can see\nin the example above. However, Czech language has three plural forms. Some\nlanguages have up to 6 plural forms and some don’t have plurals at all!</p>\n<div class=\"admonition hint\">\n<p class=\"first admonition-title\">Hint</p>\n<p class=\"last\">Plural forms for all languages can be found in the\n<a class=\"reference external\" href=\"http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html\">CLDR repository</a>.</p>\n</div>\n<div class=\"section\" id=\"english-plural-rules\">\n<h3>English plural rules<a class=\"headerlink\" href=\"#english-plural-rules\" title=\"Permalink to this headline\">¶</a></h3>\n<p>How do we know which plural form we should use? It’s very simple:\nwe, as developers, only need to know plural forms of the language we use in\nour source. Our component is written in English, so looking at\n<a class=\"reference external\" href=\"http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html#en\">English plural rules</a> we’ll\nneed just two forms:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">one</span></code></dt>\n<dd>Singular form</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">other</span></code></dt>\n<dd>Plural form</dd>\n</dl>\n<p>We don’t need to select these forms manually. We’ll use <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Plural\">&lt;Plural&gt;</a>\ncomponent, which takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> prop and based on the active language, selects\nthe right plural form:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n   <span class=\"p\">&lt;</span><span class=\"nt\">Plural</span>\n      <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">messagesCount</span><span class=\"p\">}</span>\n      <span class=\"na\">one</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;s # message in your inbox&quot;</span>\n      <span class=\"na\">other</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;re # messages in your inbox&quot;</span>\n   <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>This component will render <code class=\"docutils literal notranslate\"><span class=\"pre\">There's</span> <span class=\"pre\">1</span> <span class=\"pre\">message</span> <span class=\"pre\">in</span> <span class=\"pre\">your</span> <span class=\"pre\">inbox</span></code> when\n<code class=\"docutils literal notranslate\"><span class=\"pre\">messageCount</span> <span class=\"pre\">=</span> <span class=\"pre\">1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">There're</span> <span class=\"pre\">#</span> <span class=\"pre\">messages</span> <span class=\"pre\">in</span> <span class=\"pre\">your</span> <span class=\"pre\">inbox</span></code> for any other\nvalues of <code class=\"docutils literal notranslate\"><span class=\"pre\">messageCount</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">#</span></code> is a placeholder, which is replaced with <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>.</p>\n<p>Cool! Curious how this component is transformed under the hood and how the\nmessage looks in MessageFormat syntax? Run <a class=\"reference internal\" href=\"../../ref/cli/#lingui-cli-extract\"><code class=\"xref std std-cli docutils literal notranslate\"><span class=\"pre\">extract</span></code></a> command and find out by\nyourself:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">{</span><span class=\"n\">messagesCount</span><span class=\"p\">,</span> <span class=\"n\">plural</span><span class=\"p\">,</span>\n   <span class=\"n\">one</span> <span class=\"p\">{</span><span class=\"n\">There</span><span class=\"s1\">&#39;s # message in your inbox}</span>\n   <span class=\"n\">other</span> <span class=\"p\">{</span><span class=\"n\">There</span><span class=\"s1\">&#39;re # messages in your inbox}}</span>\n</pre></div>\n</div>\n<p>In catalog you’ll see the message in one line. Here we wrapped it to make it more readable.</p>\n<p>The <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Plural\">&lt;Plural&gt;</a> is gone and replaced with <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> again!\nThe sole purpose of <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Plural\">&lt;Plural&gt;</a> is to generate proper syntax in message.</p>\n<p>Things are getting a bit more complicated, but i18n is a complex process. At\nleast we don’t have to write this message manually!</p>\n</div>\n<div class=\"section\" id=\"beware-of-zeroes\">\n<h3>Beware of zeroes!<a class=\"headerlink\" href=\"#beware-of-zeroes\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Just a short detour, because it’s a common misunderstanding.</p>\n<p>You may wonder, why the following code doesn’t work as expected:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">Plural</span>\n   <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">messagesCount</span><span class=\"p\">}</span>\n   <span class=\"na\">zero</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;re no messages&quot;</span>\n   <span class=\"na\">one</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;s # message in your inbox&quot;</span>\n   <span class=\"na\">other</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;re # messages in your inbox&quot;</span>\n<span class=\"p\">/&gt;</span>\n</pre></div>\n</div>\n<p>This component will render <code class=\"docutils literal notranslate\"><span class=\"pre\">There're</span> <span class=\"pre\">0</span> <span class=\"pre\">messages</span> <span class=\"pre\">in</span> <span class=\"pre\">your</span> <span class=\"pre\">inbox</span></code> for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">messagesCount</span> <span class=\"pre\">=</span> <span class=\"pre\">0</span></code>. Why so? Because English doesn’t have <code class=\"docutils literal notranslate\"><span class=\"pre\">zero</span></code>\n<a class=\"reference external\" href=\"http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html#en\">plural form</a>.</p>\n<p>Looking at <a class=\"reference external\" href=\"http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html#en\">English plural rules</a>, it’s:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"5%\" />\n<col width=\"95%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">N</th>\n<th class=\"head\">Form</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td>0</td>\n<td>other</td>\n</tr>\n<tr class=\"row-odd\"><td>1</td>\n<td>one</td>\n</tr>\n<tr class=\"row-even\"><td>n</td>\n<td>other (anything else)</td>\n</tr>\n</tbody>\n</table>\n<p>However, decimal numbers (even <code class=\"docutils literal notranslate\"><span class=\"pre\">1.0</span></code>) use <code class=\"docutils literal notranslate\"><span class=\"pre\">other</span></code> form every time:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">There</span><span class=\"s1\">&#39;re 0.0 messages in your inbox.</span>\n</pre></div>\n</div>\n<p>Aren’t languages beautiful?</p>\n</div>\n<div class=\"section\" id=\"exact-forms\">\n<h3>Exact forms<a class=\"headerlink\" href=\"#exact-forms\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Alright, back to our example. What if we really want to render <code class=\"docutils literal notranslate\"><span class=\"pre\">There're</span> <span class=\"pre\">no</span> <span class=\"pre\">messages</span></code>\nfor <code class=\"docutils literal notranslate\"><span class=\"pre\">messagesCount</span> <span class=\"pre\">=</span> <span class=\"pre\">0</span></code>? Exact forms to the rescue!</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">Plural</span>\n   <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">messagesCount</span><span class=\"p\">}</span>\n   <span class=\"na\">_0</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;re no messages&quot;</span>\n   <span class=\"na\">one</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;s # message in your inbox&quot;</span>\n   <span class=\"na\">other</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;re # messages in your inbox&quot;</span>\n<span class=\"p\">/&gt;</span>\n</pre></div>\n</div>\n<p>What’s that <code class=\"docutils literal notranslate\"><span class=\"pre\">_0</span></code>? MessageFormat allows exact forms, like <code class=\"docutils literal notranslate\"><span class=\"pre\">=0</span></code>. However,\nReact props can’t start with <code class=\"docutils literal notranslate\"><span class=\"pre\">=</span></code> and can’t be numbers either, so we need to\nwrite <code class=\"docutils literal notranslate\"><span class=\"pre\">_N</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">=0</span></code>.</p>\n<p>It works with any number, so we can go wild and customize it this way:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">Plural</span>\n   <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">messagesCount</span><span class=\"p\">}</span>\n   <span class=\"na\">_0</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;re no messages&quot;</span>\n   <span class=\"na\">_1</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;s one message in your inbox&quot;</span>\n   <span class=\"na\">_2</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;re two messages in your inbox, that&#39;s not much!&quot;</span>\n   <span class=\"na\">other</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;re # messages in your inbox&quot;</span>\n<span class=\"p\">/&gt;</span>\n</pre></div>\n</div>\n<p>… and so on. Exact matches always take precedence before plural forms.</p>\n</div>\n<div class=\"section\" id=\"variables-and-components\">\n<h3>Variables and components<a class=\"headerlink\" href=\"#variables-and-components\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Let’s go back to our original pluralized message:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n   <span class=\"p\">&lt;</span><span class=\"nt\">Plural</span>\n      <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">messagesCount</span><span class=\"p\">}</span>\n      <span class=\"na\">one</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;s # message in your inbox&quot;</span>\n      <span class=\"na\">other</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;re # messages in your inbox&quot;</span>\n   <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>What if we want to use variables or components inside messages? Easy! Either\nwrap messages in <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a> macro or use template literals\n(suppose we have an variable <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>):</p>\n<div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span>&lt;p&gt;\n   &lt;Plural\n      value={messagesCount}\n      one={`There&#39;s # message in your inbox, ${name}`}\n      other={&lt;Trans&gt;There&#39;re &lt;strong&gt;#&lt;/strong&gt; messages in your inbox, {name}&lt;/Trans&gt;}\n   /&gt;\n&lt;/p&gt;\n</pre></div>\n</div>\n<p>We can use nested macros, components, variables, expressions, really anything.</p>\n<p>This gives us enough flexibility for all usecases.</p>\n</div>\n<div class=\"section\" id=\"custom-message-id\">\n<h3>Custom message ID<a class=\"headerlink\" href=\"#custom-message-id\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Let’s finish this with a short example of plurals with custom ID. We can\npass an <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> prop to <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Plural\">&lt;Plural&gt;</a> as we would to <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-Trans\">&lt;Trans&gt;</a>:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n   <span class=\"p\">&lt;</span><span class=\"nt\">Plural</span>\n      <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;Inbox.messagesCount&quot;</span>\n      <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">messagesCount</span><span class=\"p\">}</span>\n      <span class=\"na\">one</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;s # message in your inbox&quot;</span>\n      <span class=\"na\">other</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;re # messages in your inbox&quot;</span>\n   <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"formats\">\n<h2>Formats<a class=\"headerlink\" href=\"#formats\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The last message in our component is again a bit specific:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span>\n   <span class=\"nx\">Last</span> <span class=\"nx\">login</span> <span class=\"nx\">on</span> <span class=\"p\">{</span><span class=\"nx\">lastLogin</span><span class=\"p\">}.</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">lastLogin</span></code> is a date object and we need to format it properly. Dates are\nformatted differently in different languages, but we don’t have\nto do manually. The heavylifting is done in <a class=\"reference external\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl object</a>,\nwe’ll just use <a class=\"reference internal\" href=\"../../ref/macro/#jsxmacro-DateFormat\">&lt;DateFormat&gt;</a> macro:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span>\n   <span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n      <span class=\"nx\">Last</span> <span class=\"nx\">login</span> <span class=\"nx\">on</span> <span class=\"p\">&lt;</span><span class=\"nt\">DateFormat</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">lastLogin</span><span class=\"p\">}</span> <span class=\"p\">/&gt;.</span>\n   <span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>This will format the date using the conventional format for the active language.</p>\n</div>\n<div class=\"section\" id=\"review\">\n<h2>Review<a class=\"headerlink\" href=\"#review\" title=\"Permalink to this headline\">¶</a></h2>\n<p>After all modifications, the final component with i18n looks like this:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// Inbox.js</span>\n<span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Trans</span><span class=\"p\">,</span> <span class=\"nx\">Plural</span><span class=\"p\">,</span> <span class=\"nx\">DateFormat</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">Inbox</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">messages</span><span class=\"p\">,</span> <span class=\"nx\">markAsRead</span><span class=\"p\">,</span> <span class=\"nx\">user</span> <span class=\"p\">})</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">messagesCount</span> <span class=\"o\">=</span> <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">lastLogin</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">user</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Message</span> <span class=\"nx\">Inbox</span><span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n            <span class=\"nx\">See</span> <span class=\"nx\">all</span> <span class=\"p\">&lt;</span><span class=\"nt\">Link</span> <span class=\"na\">to</span><span class=\"o\">=</span><span class=\"s\">&quot;/unread&quot;</span><span class=\"p\">&gt;</span><span class=\"nx\">unread</span> <span class=\"nx\">messages</span><span class=\"p\">&lt;/</span><span class=\"nt\">Link</span><span class=\"p\">&gt;{</span><span class=\"s2\">&quot; or &quot;</span><span class=\"p\">}</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">markAsRead</span><span class=\"p\">}&gt;</span><span class=\"nx\">mark</span> <span class=\"nx\">them</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span> <span class=\"nx\">as</span> <span class=\"nx\">read</span><span class=\"p\">.</span>\n          <span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">Plural</span>\n            <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">messagesCount</span><span class=\"p\">}</span>\n            <span class=\"na\">one</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;s # message in your inbox.&quot;</span>\n            <span class=\"na\">other</span><span class=\"o\">=</span><span class=\"s\">&quot;There&#39;re # messages in your inbox.&quot;</span>\n          <span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\n        <span class=\"p\">&lt;</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Last</span> <span class=\"nx\">login</span> <span class=\"nx\">on</span> <span class=\"p\">&lt;</span><span class=\"nt\">DateFormat</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">lastLogin</span><span class=\"p\">}</span> <span class=\"p\">/&gt;.&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>That’s all for this tutorial! Checkout the reference documentation or various guide\nin the documentation for more info and happy internationalizing!</p>\n</div>\n<div class=\"section\" id=\"further-reading\">\n<h2>Further reading<a class=\"headerlink\" href=\"#further-reading\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"../ref/react.html\">&#64;lingui/react reference documentation</a></li>\n<li><a class=\"reference external\" href=\"../ref/cli.html\">&#64;lingui/cli reference documentation</a></li>\n<li><a class=\"reference external\" href=\"../guides/plurals.html\">Pluralization Guide</a></li>\n</ul>\n</div>\n</div>\n","toc":"<ul>\n<li><a class=\"reference internal\" href=\"#\">Tutorial - Internationalization of React apps</a><ul>\n<li><a class=\"reference internal\" href=\"#let-s-start\">Let’s Start</a></li>\n<li><a class=\"reference internal\" href=\"#installing-linguijs\">Installing LinguiJS</a></li>\n<li><a class=\"reference internal\" href=\"#setup\">Setup</a></li>\n<li><a class=\"reference internal\" href=\"#introducing-internationalization\">Introducing internationalization</a><ul>\n<li><a class=\"reference internal\" href=\"#macros-vs-components\">Macros vs. Components</a></li>\n<li><a class=\"reference internal\" href=\"#extracting-messages\">Extracting messages</a></li>\n<li><a class=\"reference internal\" href=\"#summary-of-basic-workflow\">Summary of basic workflow</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#formatting\">Formatting</a><ul>\n<li><a class=\"reference internal\" href=\"#jsx-to-messageformat-transformations\">JSX to MessageFormat transformations</a></li>\n<li><a class=\"reference internal\" href=\"#message-id\">Message ID</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#plurals\">Plurals</a><ul>\n<li><a class=\"reference internal\" href=\"#english-plural-rules\">English plural rules</a></li>\n<li><a class=\"reference internal\" href=\"#beware-of-zeroes\">Beware of zeroes!</a></li>\n<li><a class=\"reference internal\" href=\"#exact-forms\">Exact forms</a></li>\n<li><a class=\"reference internal\" href=\"#variables-and-components\">Variables and components</a></li>\n<li><a class=\"reference internal\" href=\"#custom-message-id\">Custom message ID</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#formats\">Formats</a></li>\n<li><a class=\"reference internal\" href=\"#review\">Review</a></li>\n<li><a class=\"reference internal\" href=\"#further-reading\">Further reading</a></li>\n</ul>\n</li>\n</ul>\n"}}