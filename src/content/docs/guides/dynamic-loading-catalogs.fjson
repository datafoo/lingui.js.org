{"parents": [], "prev": {"link": "../excluding-build-files/", "title": "Excluding message catalog build files"}, "next": {"link": "../optimized-components/", "title": "Optimized components"}, "title": "Dynamic loading of message catalogs", "meta": {}, "body": "<p id=\"dynamic-loading-catalogs\">Jump to <a class=\"reference external\" href=\"i18nLoaderComponent\">final component</a>.</p>\n<div class=\"section\" id=\"dynamic-loading-of-message-catalogs\">\n<h1>Dynamic loading of message catalogs<a class=\"headerlink\" href=\"#dynamic-loading-of-message-catalogs\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">I18nProvider</span></code> doesn\u2019t assume anything about your app and it\u2019s your\nresponsibility to load messages based on active language. Here\u2019s an example of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">I18nLoader</span></code> component which is connected to Redux store and loads message\ncatalogs using <a class=\"reference external\" href=\"https://webpack.js.org/guides/code-splitting-async/\">dynamic import in Webpack</a>.</p>\n<div class=\"section\" id=\"setup\">\n<h2>Setup<a class=\"headerlink\" href=\"#setup\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">You don\u2019t have to install following Babel plugins if you\u2019re using Create React App\nor similar framework which already has it.</p>\n</div>\n<p>We are using the <a class=\"reference external\" href=\"https://github.com/tc39/proposal-dynamic-import\">Dynamic Import() Proposal</a>\nto ECMAScript. We need to install <code class=\"docutils literal notranslate\"><span class=\"pre\">babel-plugin-syntax-dynamic-import</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">babel-plugin-dynamic-import-node</span></code> to make it work. Also, the code examples given here make use of <code class=\"docutils literal notranslate\"><span class=\"pre\">babel-plugin-transform-class-properties</span></code></p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>yarn add --dev babel-plugin-syntax-dynamic-import babel-plugin-dynamic-import-node babel-plugin-transform-class-properties\n</pre></div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\"><cite>babel-plugin-dynamic-import-node</cite> is required when running tests in Jest.</p>\n</div>\n<div class=\"highlight-js notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// .babelrc</span>\n<span class=\"p\">{</span>\n  <span class=\"s2\">&quot;plugins&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;syntax-dynamic-import&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;transform-class-properties&quot;</span>\n  <span class=\"p\">],</span>\n  <span class=\"s2\">&quot;env&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;test&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">&quot;plugins&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;dynamic-import-node&quot;</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"component\">\n<h2>Component<a class=\"headerlink\" href=\"#component\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Let\u2019s start with the component. We\u2019re going to wrap <a class=\"reference internal\" href=\"../../ref/react/#component-I18nProvider\">&lt;I18nProvider&gt;</a>\nfrom <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;lingui/react</span></code>. Active language is loaded from redux store, while\nmessages are dynamically loaded and stored in local state.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method looks like this:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">render</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">children</span><span class=\"p\">,</span> <span class=\"nx\">language</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span>\n   <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">catalogs</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span>\n\n   <span class=\"c1\">// Skip rendering when catalog isn&#39;t loaded.</span>\n   <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">catalogs</span><span class=\"p\">[</span><span class=\"nx\">language</span><span class=\"p\">])</span> <span class=\"k\">return</span>\n\n   <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">I18nProvider</span> <span class=\"na\">language</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">language</span><span class=\"p\">}</span> <span class=\"na\">catalogs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">catalogs</span><span class=\"p\">}&gt;</span>\n         <span class=\"p\">{</span><span class=\"nx\">children</span><span class=\"p\">}</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">I18nProvider</span><span class=\"p\">&gt;</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>Next, we need to load message catalog when language changes which isn\u2019t done yet. Dynamic import returns a promise and we don\u2019t want to re-render\nour component until the message catalog is loaded. Let\u2019s add a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">shouldComponentUpdate()</span></code> method:</p>\n<div class=\"highlight-js notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">shouldComponentUpdate</span><span class=\"p\">(</span><span class=\"nx\">nextProps</span><span class=\"p\">,</span> <span class=\"nx\">nextState</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">language</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">nextProps</span>\n   <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">catalogs</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">nextState</span>\n\n   <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">language</span> <span class=\"o\">!==</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">language</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"nx\">catalogs</span><span class=\"p\">[</span><span class=\"nx\">language</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n       <span class=\"c1\">// Start loading message catalog and skip update</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">loadCatalog</span><span class=\"p\">(</span><span class=\"nx\">language</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"k\">return</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">shouldComponentUpdate</span></code> isn\u2019t called during the first render, so we need\ntrigger loading of catalog manually in <code class=\"docutils literal notranslate\"><span class=\"pre\">componentDidMount</span></code>:</p>\n<div class=\"highlight-js notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">loadCatalog</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">language</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"loading-of-message-catalogs\">\n<h2>Loading of message catalogs<a class=\"headerlink\" href=\"#loading-of-message-catalogs\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The most important piece in this story is <code class=\"docutils literal notranslate\"><span class=\"pre\">loadCatalog()</span></code> method. It\u2019s\nnecessary to load compiled message catalogs. The recommended way is compile\nmessages on-the-fly using <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;lingui/loader</span></code>, but it\u2019s also possible to load\ncompiled <code class=\"docutils literal notranslate\"><span class=\"pre\">messages.js</span></code> directly.</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>yarn add --dev @lingui/loader\n</pre></div>\n</div>\n<p>Here we use the dynamic import syntax to load the message catalog:</p>\n<div class=\"highlight-js notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">loadCatalog</span> <span class=\"o\">=</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">language</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// using @lingui/loader - load raw messages.json</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">catalog</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"kr\">import</span><span class=\"p\">(</span>\n    <span class=\"cm\">/* webpackMode: &quot;lazy&quot;, webpackChunkName: &quot;i18n-[index]&quot; */</span>\n    <span class=\"sb\">`@lingui/loader!locale/</span><span class=\"si\">${</span><span class=\"nx\">language</span><span class=\"si\">}</span><span class=\"sb\">/messages.json`</span><span class=\"p\">)</span>\n\n  <span class=\"c1\">// load compiled messages.js</span>\n  <span class=\"c1\">// const catalog = await import(</span>\n  <span class=\"c1\">//  /* webpackMode: &quot;lazy&quot;, webpackChunkName: &quot;i18n-[index]&quot; */</span>\n  <span class=\"c1\">//  `locale/${language}/messages.js`)</span>\n\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"p\">=&gt;</span> <span class=\"p\">({</span>\n    <span class=\"nx\">catalogs</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">catalogs</span><span class=\"p\">,</span>\n      <span class=\"p\">[</span><span class=\"nx\">language</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">catalog</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}))</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>Dynamic import returns a promise, so we can either use async/await keywords or\ngood old promises:</p>\n<div class=\"highlight-js notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">loadCatalog</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">language</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">import</span><span class=\"p\">(</span>\n    <span class=\"cm\">/* webpackMode: &quot;lazy&quot;, webpackChunkName: &quot;i18n-[index]&quot; */</span>\n    <span class=\"sb\">`@lingui/loader!locale/</span><span class=\"si\">${</span><span class=\"nx\">language</span><span class=\"si\">}</span><span class=\"sb\">/messages.json`</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">catalog</span> <span class=\"p\">=&gt;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"p\">=&gt;</span> <span class=\"p\">({</span>\n      <span class=\"nx\">catalogs</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">catalogs</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"nx\">language</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">catalog</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}))</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>The comment before message catalog path is webpack\u2019s <em>magic comment</em>.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">webpackMode:</span> <span class=\"pre\">lazy</span></code> means, that chunks are loaded as requested.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">webpackChunkName:</span> <span class=\"pre\">&quot;i18n-[index]&quot;</span></code> overrides default chunk name for this import.</p>\n</div>\n<div class=\"section\" id=\"i18nloadercomponent\">\n<span id=\"id1\"></span><h2>Final component<a class=\"headerlink\" href=\"#i18nloadercomponent\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Here\u2019s the full source of <code class=\"docutils literal notranslate\"><span class=\"pre\">I18nLoader</span></code> component:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">connect</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-redux&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">I18nProvider</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/react&#39;</span>\n\n<span class=\"kr\">export</span> <span class=\"kr\">class</span> <span class=\"nx\">I18nLoader</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">catalogs</span><span class=\"o\">:</span> <span class=\"p\">{},</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">loadCatalog</span> <span class=\"o\">=</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">language</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">catalog</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"kr\">import</span><span class=\"p\">(</span>\n      <span class=\"cm\">/* webpackMode: &quot;lazy&quot;, webpackChunkName: &quot;i18n-[index]&quot; */</span>\n      <span class=\"sb\">`@lingui/loader!locale/</span><span class=\"si\">${</span><span class=\"nx\">language</span><span class=\"si\">}</span><span class=\"sb\">/messages.json`</span><span class=\"p\">)</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"p\">=&gt;</span> <span class=\"p\">({</span>\n      <span class=\"nx\">catalogs</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">catalogs</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"nx\">language</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">catalog</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}))</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">loadCatalog</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">language</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">shouldComponentUpdate</span><span class=\"p\">(</span><span class=\"nx\">nextProps</span><span class=\"p\">,</span> <span class=\"nx\">nextState</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">language</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">nextProps</span>\n    <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">catalogs</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">nextState</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">language</span> <span class=\"o\">!==</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">language</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"nx\">catalogs</span><span class=\"p\">[</span><span class=\"nx\">language</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">loadCatalog</span><span class=\"p\">(</span><span class=\"nx\">language</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"kc\">true</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">render</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">children</span><span class=\"p\">,</span> <span class=\"nx\">language</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span>\n    <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">catalogs</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span>\n\n    <span class=\"c1\">// Skip rendering when catalog isn&#39;t loaded.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">catalogs</span><span class=\"p\">[</span><span class=\"nx\">language</span><span class=\"p\">])</span> <span class=\"k\">return</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">I18nProvider</span> <span class=\"na\">language</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">language</span><span class=\"p\">}</span> <span class=\"na\">catalogs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">catalogs</span><span class=\"p\">}&gt;</span>\n        <span class=\"p\">{</span><span class=\"nx\">children</span><span class=\"p\">}</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">I18nProvider</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Example: depends on implementation of reducer</span>\n<span class=\"kr\">const</span> <span class=\"nx\">getLanguage</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">locale</span><span class=\"p\">.</span><span class=\"nx\">language</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"p\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"nx\">language</span><span class=\"o\">:</span> <span class=\"nx\">getLanguage</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">)</span>\n<span class=\"p\">}))(</span><span class=\"nx\">I18nLoader</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"conclusion\">\n<h2>Conclusion<a class=\"headerlink\" href=\"#conclusion\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Looking at the content of build dir, we see one chunk per language:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>i18n-0.c433b3bd.chunk.js\ni18n-1.f0cf2e3d.chunk.js\nmain.ab4626ef.js\n</pre></div>\n</div>\n<p>When page is loaded initially, only main bundle and bundle for the first\nlanguage are loaded:</p>\n<img alt=\"Requests during the first render\" src=\"../../_images/dynamic-loading-catalogs-1.png\" />\n<p>After changing language in UI, the second language bundle is loaded:</p>\n<img alt=\"Requests during the second render\" src=\"../../_images/dynamic-loading-catalogs-2.png\" />\n<p>And that\u2019s it! \ud83c\udf89</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["guides/optimized-components", "Optimized components", "N", "next"], ["guides/excluding-build-files", "Excluding message catalog build files", "P", "previous"]], "sourcename": "guides/dynamic-loading-catalogs.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Dynamic loading of message catalogs</a><ul>\n<li><a class=\"reference internal\" href=\"#setup\">Setup</a></li>\n<li><a class=\"reference internal\" href=\"#component\">Component</a></li>\n<li><a class=\"reference internal\" href=\"#loading-of-message-catalogs\">Loading of message catalogs</a></li>\n<li><a class=\"reference internal\" href=\"#i18nloadercomponent\">Final component</a></li>\n<li><a class=\"reference internal\" href=\"#conclusion\">Conclusion</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "guides/dynamic-loading-catalogs", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.11", "display_github": true, "github_user": "lingui", "github_version": "master/", "github_repo": "js-lingui", "conf_py_path": "docs/"}