{"parents": [], "prev": {"link": "../dynamic-loading-catalogs/", "title": "Dynamic loading of message catalogs"}, "next": {"link": "../plurals/", "title": "Pluralization"}, "title": "Optimized components", "meta": {}, "body": "<div class=\"section\" id=\"optimized-components\">\n<span id=\"guide-optimized-components\"></span><h1>Optimized components<a class=\"headerlink\" href=\"#optimized-components\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Let\u2019s call any component implementing <code class=\"docutils literal notranslate\"><span class=\"pre\">shouldComponentUpdate</span></code> an <em>Optimized\ncomponent</em>.</p>\n<div class=\"admonition hint\">\n<p class=\"first admonition-title\">Hint</p>\n<p class=\"last\"><strong>TL;DR:</strong> Optimized components are handled correctly in LinguiJS by default.\nRead this document if you want to understand how things work under the hood.</p>\n</div>\n<p>React components can be optimized to skip updates implementing\n<code class=\"docutils literal notranslate\"><span class=\"pre\">shouldComponentUpdate</span></code>. Based on change of props and state, component\ncan decide to continue re-rendering or skip the update completely.\nHowever, LinguiJS reads translations from context and there\u2019re two cases\nwhich must be handled to make i18n related updates reliable.</p>\n<p>The two cases to handle are:</p>\n<ol class=\"arabic simple\">\n<li>Translations inside optimized component.</li>\n<li>Optimized component is wrapped in <a class=\"reference internal\" href=\"../../ref/react/#withI18n\" title=\"withI18n\"><code class=\"xref js js-func docutils literal notranslate\"><span class=\"pre\">withI18n()</span></code></a> to translate text attributes.</li>\n</ol>\n<p>Let\u2019s take a look at both scenarios.</p>\n<div class=\"section\" id=\"translations-inside-optimized-component\">\n<h2>Translations inside optimized component<a class=\"headerlink\" href=\"#translations-inside-optimized-component\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Imagine following React tree:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>&lt;OptimizedComponent&gt;\n   &lt;AnotherComponent&gt;\n       &lt;Trans&gt;I am not alone!&lt;/Trans&gt;\n   &lt;/AnotherComponent&gt;\n&lt;/OptimizedComponent&gt;\n</pre></div>\n</div>\n<p>When active language is changed or message catalog is updated,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">OptimizedComponent</span></code> will probably skip the update, because it\u2019s props\ndon\u2019t change. It means that all children of <code class=\"docutils literal notranslate\"><span class=\"pre\">OptimizedComponent</span></code> won\u2019t be\nupdated, including <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> component.</p>\n<p>By default, all <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> components listen for language and catalog changes\nand update themselves when it happens. Even if <code class=\"docutils literal notranslate\"><span class=\"pre\">OptimizedComponent</span></code>\nskips update, <a class=\"reference internal\" href=\"../../ref/react/#component-Trans\">&lt;Trans&gt;</a> component is updated correctly.</p>\n<p>Also, <a class=\"reference internal\" href=\"../../ref/react/#withI18n\" title=\"withI18n\"><code class=\"xref js js-func docutils literal notranslate\"><span class=\"pre\">withI18n()</span></code></a> HOC listens for language and catalog changes, but this\nbehavior can be disabled by passing <code class=\"docutils literal notranslate\"><span class=\"pre\">update</span> <span class=\"pre\">=</span> <span class=\"pre\">false</span></code> option:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// Component won&#39;t listen for language/catalog changes</span>\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">withI18n</span><span class=\"p\">({</span> <span class=\"nx\">update</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"p\">})(</span><span class=\"nx\">Component</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"optimized-component-wrapped-in-withi18n\">\n<h2>Optimized component wrapped in <a class=\"reference internal\" href=\"../../ref/react/#withI18n\" title=\"withI18n\"><code class=\"xref js js-func docutils literal notranslate\"><span class=\"pre\">withI18n()</span></code></a><a class=\"headerlink\" href=\"#optimized-component-wrapped-in-withi18n\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Component should be wrapped in <a class=\"reference internal\" href=\"../../ref/react/#withI18n\" title=\"withI18n\"><code class=\"xref js js-func docutils literal notranslate\"><span class=\"pre\">withI18n()</span></code></a> HOC when it\u2019s required to access\nlow-level i18n API. Common usecase is translation of attributes:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"nx\">Trans</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@lingui/macro&#39;</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">HeaderLink</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PureComponent</span> <span class=\"p\">{</span>\n   <span class=\"nx\">render</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">i18n</span><span class=\"p\">.</span><span class=\"nx\">_</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"sb\">`Title`</span><span class=\"p\">)}&gt;&lt;</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;</span><span class=\"nx\">Header</span><span class=\"p\">&lt;/</span><span class=\"nt\">Trans</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">withI18n</span><span class=\"p\">()(</span><span class=\"nx\">HeaderLink</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Content of link will be updated correctly as discussed in previous section.\nHowever, text attributes aren\u2019t components but only function calls so they can\u2019t\nlisten to changes of active language and catalog.</p>\n<p>The trick here is to update whole component, but since it\u2019s a PureComponent,\nit does shallow comparison of props. <a class=\"reference internal\" href=\"../../ref/react/#withI18n\" title=\"withI18n\"><code class=\"xref js js-func docutils literal notranslate\"><span class=\"pre\">withI18n()</span></code></a> HOC makes things easier by\npassing <code class=\"docutils literal notranslate\"><span class=\"pre\">i18nHash</span></code> to wrapped component. This hash is changed after every\nchange of active language or catalog.</p>\n<p>If you have your own implementation of <code class=\"docutils literal notranslate\"><span class=\"pre\">shouldComponentUpdate</span></code>, simply compare\nalso <code class=\"docutils literal notranslate\"><span class=\"pre\">i18nHash</span></code>:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">HeaderLink</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n   <span class=\"nx\">shouldComponentUpdate</span><span class=\"p\">(</span><span class=\"nx\">nextProps</span><span class=\"p\">,</span> <span class=\"nx\">nextState</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">nextProps</span><span class=\"p\">.</span><span class=\"nx\">i18nHash</span> <span class=\"o\">!==</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">i18nHash</span> <span class=\"cm\">/* &amp;&amp; your condition */</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nx\">render</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// render component as usual</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>If you don\u2019t want your component to receive this hash for whatever reason,\nyou can disable it by passing <code class=\"docutils literal notranslate\"><span class=\"pre\">withHash</span> <span class=\"pre\">=</span> <span class=\"pre\">false</span></code> option to HOC:</p>\n<div class=\"highlight-jsx notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// Component won&#39;t pass i18nHash prop</span>\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">withI18n</span><span class=\"p\">({</span> <span class=\"nx\">withHash</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"p\">})(</span><span class=\"nx\">Component</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"summary\">\n<h2>Summary<a class=\"headerlink\" href=\"#summary\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>LinguiJS handles updates in and for Optimized components in most cases. If you\nwant to disable this behavior, you can pass either <code class=\"docutils literal notranslate\"><span class=\"pre\">update</span> <span class=\"pre\">=</span> <span class=\"pre\">false</span></code>\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">withHash</span> <span class=\"pre\">=</span> <span class=\"pre\">false</span></code> to <a class=\"reference internal\" href=\"../../ref/react/#withI18n\" title=\"withI18n\"><code class=\"xref js js-func docutils literal notranslate\"><span class=\"pre\">withI18n()</span></code></a> HOC.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">update</span></code> fixes updates if component has optimized parents while <code class=\"docutils literal notranslate\"><span class=\"pre\">withHash</span></code>\nfixes updates for intermediate optimized children.</p>\n</div>\n<div class=\"section\" id=\"further-reading\">\n<h2>Further reading<a class=\"headerlink\" href=\"#further-reading\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://reactjs.org/docs/optimizing-performance.html#avoid-reconciliation\">React docs: Optimizing Performance</a></li>\n<li><a class=\"reference external\" href=\"https://medium.com/react-ecosystem/how-to-handle-react-context-a7592dfdcbc\">How to handle React context in a reliable way</a></li>\n</ul>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["guides/plurals", "Pluralization", "N", "next"], ["guides/dynamic-loading-catalogs", "Dynamic loading of message catalogs", "P", "previous"]], "sourcename": "guides/optimized-components.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Optimized components</a><ul>\n<li><a class=\"reference internal\" href=\"#translations-inside-optimized-component\">Translations inside optimized component</a></li>\n<li><a class=\"reference internal\" href=\"#optimized-component-wrapped-in-withi18n\">Optimized component wrapped in <code class=\"docutils literal notranslate\"><span class=\"pre\">withI18n()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#summary\">Summary</a></li>\n<li><a class=\"reference internal\" href=\"#further-reading\">Further reading</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "guides/optimized-components", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.11", "display_github": true, "github_user": "lingui", "github_version": "master/", "github_repo": "js-lingui", "conf_py_path": "docs/"}